<input id="label-type" type="hidden"/>
<script>
  //  Proof of concept to control DataWedge via Web Sockets
  var msg_input_plugin_enable = {
    "action": "com.symbol.datawedge.api.ACTION_SCANNERINPUTPLUGIN",
    "extra_key": "com.symbol.datawedge.api.EXTRA_PARAMETER",
    "extra_value": "ENABLE_PLUGIN"
  };
  var msg_input_plugin_disable = {
    "action": "com.symbol.datawedge.api.ACTION_SCANNERINPUTPLUGIN",
    "extra_key": "com.symbol.datawedge.api.EXTRA_PARAMETER",
    "extra_value": "DISABLE_PLUGIN"
  };

  // WEBSOCKET ----------------------------------------------------------------------------------
  var socketClosed = true;
  var address = "127.0.0.1";
  var port = "12345";

  function socketOnError() {
    console.log("Error");
    if (!socketClosed) {
      socketClosed = true;
      ws.close();
    }
  }

  function init() {
    ws = new WebSocket("ws://" + address + ":" + port + "/");
    ws.onmessage = function (event) {
      // event.data ha forma: Barcode (8273878337383) [LABEL-TYPE-EAN13]
      // il barcode è event.extras["com.symbol.datawedge.data_string"]: String contains the output data as a String. In the case of concatenated barcodes, the decode data is concatenated and sent out as a single string. In the example above: 8273878337383
      // il label_type è event.extras["com.symbol.datawedge.label_type"]: String contains the barcode label type. In the example above: LABEL-TYPE-EAN13
      // il decode_data è event.extras["com.symbol.datawedge.decode_data"]: Decode data is returned as a list of byte arrays. In most cases there will be one byte array per decode. For barcode symbologies that support concatenation (i.e. Codabar, Code128, MicroPDF, etc.) the decoded data is stored in multiple byte arrays (one byte array per bar code). Clients can get data in each byte array by passing an index.
      $('#barcode').val(event.extras["com.symbol.datawedge.data_string"]);
      $('#label-type').val(event.extras["com.symbol.datawedge.label_type"]);
      $("#send").click();
    };
    //  In production you would want this to be resiliant against the server being killed by Android, by the user navigating between pages or any other unexpected error related to connection.
    ws.onclose = function () {
      setSocketStatus("success", "danger");
      socketClosed = true;
    };
    ws.onopen = function () {
      setSocketStatus("danger", "success");
      socketClosed = false;
    };
    ws.onerror = function (event) {
      socketOnError();
    };
  }
  function setSocketStatus(origin, to) {
    $('#connection').removeClass(origin).addClass(to);
  }
  // function sendMessageToServer(json_msg) {
  //   if (socketClosed) {
  //     init();
  //   } else {
  //     ws.send(JSON.stringify(json_msg), function (error) {
  //       socketOnError();
  //     });
  //   }
  // }

  function tryInit() {
    // Solo se la socket è chiusa e siamo in ambiente android
    if (socketClosed) {
      init();
    }
  }
  // Creating the websocket
  var ua = navigator.userAgent.toLowerCase();
  var isAndroid = ua.indexOf("android") > -1; //&& ua.indexOf("mobile");
  if (isAndroid) {
    setInterval(tryInit, 1500);
  }
</script>
